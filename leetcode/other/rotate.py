#189. 旋转数组
#给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
#进阶：
#尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
#你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？
#示例 1:
#输入: nums = [1,2,3,4,5,6,7], k = 3
#输出: [5,6,7,1,2,3,4]
#解释:
#向右旋转 1 步: [7,1,2,3,4,5,6]
#向右旋转 2 步: [6,7,1,2,3,4,5]
#向右旋转 3 步: [5,6,7,1,2,3,4]
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """


##48. 旋转图像
#给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。
#你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。
#示例 1：
#输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
#输出：[[7,4,1],[8,5,2],[9,6,3]]
#示例 2：
#输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
#输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None: