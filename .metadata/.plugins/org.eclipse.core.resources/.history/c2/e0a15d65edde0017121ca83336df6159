
class Treenode:
    def __init__(self,x):
        self.value = x
        self.left = None
        self.right = None
    def pre_order(self):
        res=[]
        self.help(res)
        return res
    def help (self,res):
        if self is None:
            return
        res.append(self.value)
        help (self.left,res)
        help (self.right,res)
        
def length(node):
    if node is None:
        return 0
    left = length(node.left)
    right = length(node.right)
    return 1+ max(left,right)

      



def print_k1_k2(node,k1,k2):
    if node.value > k1 and node.vale< k2:
        print node.value
    print_k1_k2(node.left,k1,k2)
    print_k1_k2(node.right,k1,k2)
    if node.value <k1:
        print_k1_k2(node.right,k1,k2)
    if node.value > k2:
        print_k1_k2(node.left,k1,k2)
    
def reverse(node):
    if node != None:
        node.left , node.right = node.right , node.left
        reverse(node.left)
        reverse(node.right)
    else:
        return
    
def binarysearchtree(node):
    min = -2*("inf")
    max= 2*("inf")
    bst_help(node)
def bst_help(node,min,max):
    if node is None:
        return True
    if node.value < min:
        return False
    if node.value > max:
        return False
    if node.value>=min and node.value<=max:
        return bst_help(node.left,min,node.value) and  bst_help(node.right,node.value,max)

def bbs(node):
    if node is None:
        return 0
    left = bbs(node.left)
    right =bbs(node.right)
    if left ==-1 or right == -1:
        return -1
    if abs(left-right) > 1:
        return -1
    
def print_sum_k(node,k):
    if node is None:
        return False
    sum = 0
    print_sum_k_help(node,k,sum)

def  print_sum_k_help(node,k,sum):
    if node is None:
        return False
    sum+=node.value
    if sum == k:
        return True
    else:
        return print_sum_k_help(node.left,k,sum) and print_sum_k_help(node.right,k,sum)
    
def symmetric(node):
    if node is None:
        return False
    return help(node.left,node.right)
def help(node1,node2):
    if node1.left is None and node2.right is None:
        return True
    if node1.left is None or node2.right is None:
        return False
    if node1.value != node2.value:
        return False
    else:
        return  help(node1.left,node2.right) and help(node1.right,node2.left) 
    
def diff(node):
    dif = -1
    res = []
    return diff_help(node,dif,res)
def  diff_help(node,dif,res):
    if node is None:
        return 0
    left  = diff_help(node.left,dif,res)
    right = diff_help(node.right,dif,res)
    if abs(left - right) > dif:
        dif = abs(left - right)
        res= node.value
    return 1+ max(left,right)

def pre_order(node):
    if node is None:
        return
    print node.value
    pre_order(node.left)
    pre_order(node.right)
    
    
     
         
    
    
    
    
    
    
    
    
    
    
    
  
        
        
    
    
    
    
        
        
        
        
    
        
    
        
        
    