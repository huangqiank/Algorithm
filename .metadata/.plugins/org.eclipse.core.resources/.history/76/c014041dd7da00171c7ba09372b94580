class Treenode():
    def __init__(self,x):
        self.value = x
        self.left= None
        self.right =None
    def pre_order(self):
        res=[]
        self.help(res)
        return res
    def help(self,res):
        if self is None:
            return
        res.append(self.value)
        help(self.left,res)
        help(self.right,res)
    def prit(self):
        return self.value

N1 = Treenode(1)
N2 = Treenode(2)
N3 = Treenode(3)
N4 = Treenode(4)
N5 = Treenode(5)
N6 = Treenode(6)
N7 = Treenode(7)
N8 = Treenode(8)
N1.left = N2
N1.right = N3
N2.left = N4
N4.left = N7
N2.right = N5
N3.right = N6
N6.right = N8


res= []
def pre_order(node):
    global res
    if node is None:
        return
    else:
        res.append(node.value)
        pre_order(node.left)
        pre_order(node.right)
    return res

print pre_order(N1)
    
def length(node):
    if node is None:
        return 0
    a= max(length(node.left),length(node.right))
    return a+1

def bbt(node):
    if node is None:
        return 0
    a = bbt(node.left)
    b = bbt(node.right)
    if a==-1 or b==-1:
        return -1
    if abs(a-b)>1:
        return -1
    return 1+max(a,b)
node1 = Treenode(3)
node2 = Treenode(2)
node3 =Treenode(5)
node4 = Treenode(-1)
node5 = Treenode(1)
node6 = Treenode(0)
node1.left = node2
node1.right = node3
node2.left = node4
node4.right = node5
print bbt(node1)


def bst(node):
    min = -2*float("inf")
    max = 2*float("inf")
    return help(node,min,max)
def help(node,min,max):
    if node is None:
        return True
    if node.value > min and node.value <max:
        return help(node.left,min,node.value) and help(node.right,node.value,max)
    else:
        return False

node1 = Treenode(3)
node2 = Treenode(2)
node3 = Treenode(10)
node4 = Treenode(-1)
node5 = Treenode(1)
node6 = Treenode(0)
node1.left = node2
node1.right = node3
node2.left = node4
node4.right = node5
print bst(node1)
def print_k1_k2(node,k1,k2):
    if node is None:
        return 
    if node.value > k1 and node.value< k2:
        print node.value
    if node.value < k1:
        print_k1_k2(node.right,k1,k2)
    if node.value > k2:
        print_k1_k2(node.left,k1,k2)
node1 = Treenode(3)
node2 = Treenode(2)
node3 = Treenode(4)
node4 = Treenode(-1)
node5 = Treenode(3)
node6 = Treenode(0)
node1.left = node2
node1.right = node3
print_k1_k2(node1,0,5)

        
    