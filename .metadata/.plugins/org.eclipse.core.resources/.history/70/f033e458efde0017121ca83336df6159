
class Treenode:
    def __init__(self,x):
        self.value = x
        self.left = None
        self.right = None
    def pre_order(self):
        res=[]
        self.help(res)
        return res
    def help (self,res):
        if self is None:
            return
        res.append(self.value)
        help (self.left,res)
        help (self.right,res)
  
        
    




def symmetric(node):
    if node is None:
        return True
    return help(node.left,node.right)
def help(node1,node2):
    if node1 is None and node2 is None:
        return True
    if node1 is None or node2 is None:
        return False
    if node1.value != node2.value:
        return False
    else:
        return  help(node1.left,node2.right) and help(node1.right,node2.left) 
node1 = Treenode(0)
node2 = Treenode(2)
node3 = Treenode(1)
node4 = Treenode(3)
node5 = Treenode(3)

node1.left = node2
node1.right = node3
node2.left = node4
node3.right = node5


print symmetric(node1)
    
def diff(node):
    dif = -1
    res = []
    return diff_help(node,dif,res)
def  diff_help(node,dif,res):
    if node is None:
        return 0
    left  = diff_help(node.left,dif,res)
    right = diff_help(node.right,dif,res)
    if abs(left - right) > dif:
        dif = abs(left - right)
        res= node.value
    return 1+ max(left,right)

def pre_order(node):
    if node is None:
        return
    print node.value
    pre_order(node.left)
    pre_order(node.right)
    
    
     
         
    
    
    
    
    
    
    
    
    
    
    
  
        
        
    
    
    
    
        
        
        
        
    
        
    
        
        
    