'''
Created on Sep 13, 2017

@author: qiankunhuang
'''
from platform import node
    
class Node:
    def __init__(self,val):
        self.next = None
        self.val = val

class Queue:
    def __init__(self):
        self.size = 0
        self.tail = None 
        self.head = None
    def enqueue(self,x):
        New = Node(x)
        if self.tail is None:
            self.tail = New
            self.head = New
        else:
            self.tail.next = New
            self.tail = New
        self.size += 1
   
    def dequeue(self):
        if self.tail is None:
            return None
        a = self.head
        self.head = self.head.next
        self.size -= 1
        return a
    
class Stack:
    def __init__(self):
        self.size = 0
        self.tail = None 
   
    def push(self,x):
        New = Node(x)
        if self.tail is None:
            self.tail = New
        else:
            New.next = self.tail
            self.tail = New
        self.size += 1
   
    def pop(self):
        if self.tail is None:
            return None
        a = self.tail
        self.tail = self.tail.next
        self.size -= 1
        return a
    
        
def palindrom(node):
    cur_head = node
    new_head = cur_head
    s=Stack()
    while new_head != None:
        s.push(new_head.val)
        new_head = new_head.next
    new_tail = s.tail
    while new_tail != None:
        if new_tail.val != cur_head.val :
            return False
        new_tail= new_tail.next
        cur_head = cur_head.next
    return True
        
node1 = Node(0)
node2 = Node(2)
node3 = Node(3)
node4 = Node(0)
node1.next = node2
node2.next = node3
node3.next = node4
q1=Queue()
q1.tail = node4
q1.head = node1

print palindrom(node1)     
    
    
def reverse(input):
    if node.next=None:
       node
    else:
        newend=reverse(node.next)
        node.next.next =node
        node.next =None
    return newend
    
    
    
    
         
            
   