'''
Created on Sep 11, 2017

@author: qiankunhuang
'''
from __builtin__ import None
import new

class  Listnode:
    def  __init__(self,val):
        self.val = val
        self.next = None
    
class Queue:
    def __init__(self):
        self.size = 0
        self.tail = None
        self.head = None
        
    def enqueue(self , value):
        node = Listnode(value)
        if self.tail is None:
            self.tail = node
            self.head = node
        else:
            self.tail.next = node
            self.tail = node
            self.size += 1
            
    def dequeue(self):
        if self.head is None:
            return None
        else:
            a = self.head.val
            self.head = self.head.next
            self.size -= 1
            return a
        
        
class Stack:
    def __init__(self):
        self.size = 0
        self.tail = None
        
    def pop(self):
        if self.tail is None:
            return False
        else:
            a = self.tail.val
            self.tail = self.tail.next
        self.size -= 1
        return a
   
    def push(self,value):
        node = Listnode(value)
        if self.tail is None:
            self.tail = node
        else:
            node.next = self.tail 
            self.tail = node
        self.size += 1
        
def merge(node1,node2):
    new_head = Listnode(0)
    cur_head = new_head
    while node1 != None and node2 != None:
        if node1.val > node2.val:
            cur_head.next = node2
            node2 = node2.next
            cur_head=cur_head.next
        else:
            cur_head.next = node1
            node1 = node1.next
            cur_head=cur_head.next
    if node1 is None:
        cur_head.next = node2
    else:
        cur_head.next = node1
   
    while new_head.next != None:
        print new_head.next.val
        new_head = new_head.next
       

def parathesis(input):
    new_stack=Stack()
    for i in input:
        if i in ["(","[","{"]:
            new_stack.push(i)
        if i == "]":
            if new_stack.size == 0 or new_stack.pop() !="[":
                return False
        if i == ")":
            if new_stack.size == 0 or new_stack.pop() !="(":
                return False
        if i == "}":
            if new_stack.size == 0 or new_stack.pop() !="{":
                return False
    if  new_stack.size !=0:
        return False
    else:
        return True

def reverse(node):
    if node.next == None:
        return node
    newend = reverse(node.next)
    node.next.next = node
    node.next = None
    return newend

def find_midle(que):
    slow_head = que.head
    quick_head = que.head
    while quick_head != None:
        if quick_head.next is None:
            return slow_head.val
        slow_head = slow_head.next
        quick_head = quick_head.next.next
    return slow_head.val

import operator
def polan(list):
    s = Stack()
    Global_Operator = {"+":operator.add, "-":operator.sub,"*":operator.mul , "/":operator.div}
    for i in list:
        if i in Global_Operator.keys():
            left = s.pop()
            right = s.pop()
            new = Global_Operator[i](left,right)
            s.push(new)
        else:
            s.push(i)
    return s.pop()
             
def palindrom(queue):
    dummy_head = queue.head
    s=Stack()
    while dummy_head != None:
        s.push(dummy_head.val)
        dummy_head = dummy_head.next
    dummy_tail = s.tail
    dummy_head = queue.head  
    while dummy_tail != None:
        if dummy_tail.val != dummy_head.val:
            return False
        else:
            dummy_tail = dummy_tail.next
            dummy_head = dummy_head.next
    return True
            

node1 = Listnode(0)
node2 = Listnode(1)
node3 = Listnode(2)
node4 = Listnode(3)
node1.next = node2
node2.next = node3
q=Queue()
q.tail = node1
q.head = node3
q.enqueue(5)
print q.dequeue()
print q.tail.val    
s = Stack()
s.tail = node1 
s.push(3)
print s.tail.val
print s.pop()

      
        
node1 = Listnode(0)
node2 = Listnode(2)
node3 = Listnode(4)
node1.next = node2
node2.next = node3
q1=Queue()
q1.tail = node1
q1.head = node3
node4 = Listnode(1)
node5 = Listnode(3)
node6 = Listnode(5)
node4.next = node5
node5.next = node6
q2=Queue()
q2.tail = node4
q2.head = node6

merge(node1,node4)
        
print parathesis(["(","[",")"]) 

           
    
node1 = Listnode(0)
node2 = Listnode(2)
node3 = Listnode(4)
node1.next = node2
node2.next = node3   
    
def prit(node):
    while node != None:
        print  node.val
        node = node.next   
prit(reverse(node1))    

print polan([1,2,3,"+","-"])     
            
    
node1 = Listnode(0)
node2 = Listnode(2)
node3 = Listnode(2)
node4 = Listnode(0)
node1.next = node2
node2.next = node3
node3.next = node4
q1=Queue()
q1.tail = node4
q1.head = node1

print palindrom(q1)    
            

node1 = Listnode(0)
node2 = Listnode(2)
node3 = Listnode(4)

node1.next = node2
node2.next = node3

q1=Queue()
q1.tail = node3
q1.head = node1

   
   
print find_midle(q1)
      